#!/usr/bin/expect -f

# Xiaomi MultiMode/Aqara M2/M1S/P3 Gteway Global tool
# This script was reference to https://raw.githubusercontent.com/serrj-sv/lumi.gateway.mgl03/main/uart_recovery/mgl03_uart_recovery.ttl
#

set version "20231019"

set inputgw [lindex $argv 0]
set inputtty [lindex $argv 1]

send -- "$inputgw\r"
send -- "$inputtty\r"

puts "Xiaomi/Aqara Gateway Global tool script version: $version"
puts "Requires:"
puts "  sx (package lrzsz)"
puts "  stty (package coreutils)"

set ostype 0
spawn -noecho sh -c "uname"
expect {
	"Linux" {set ostype 0}
	"Darwin" {set ostype 1}
}

set timeout -1
match_max 100000

set coffee_url1 "https://buymeacoff.ee/serrj"
set coffee_url2 "https://buymeacoff.ee/niceboygithub"

puts "\n\nConnect Gateway to UART, disconnect it from power\n"

if {  $inputgw == 0 || $inputgw == 1 || $inputgw == 2 || $inputgw == 3 || $inputgw == 4 || $inputgw == 5 } {
	set idx $inputgw
} else {
	puts "Please select choose your gateway:"
	puts "\[0\] Xiaomi Multimode Gateway 1"
	puts "\[1\] Aqara Gateway M2 old Global/China, M1S, H1, P3"
	puts "\[2\] Aqara Gateway M2 Korea"
	puts "\[3\] Other Gateway with SoC RTL8197F"
	puts "\[4\] Xiaomi Multimode Gateway 2, Hub E1"
	puts "\[5\] Aqara Smart Switch Panel S1E"
	set idx 0
	send_user "Choose gateway ($idx): "
	expect_user -re "(.*)\n"
	set gwtype $expect_out(1,string)
	if {$gwtype != ""} {
		set idx $gwtype
	}
}

if { $idx == 0 } {
	set flasher_file "[pwd]/flasher_mgl03.bin"
	puts "\nXiaomi Multimode Gateway 1"
} elseif { $idx == 1 } {
	set flasher_file "[pwd]/flasher_m2gl.bin"
	puts "\nAqara Gateway M2 Global/China"
} elseif { $idx == 2 } {
	set flasher_file "[pwd]/flasher_m2kor.bin"
	puts "\nAqara Gateway M2 Korea"
} elseif { $idx == 3 } {
	set flasher_file "[pwd]/flasher.bin"
	puts "\nOther Gateway with SoC RTL8197F"
} elseif { $idx == 4 || $idx == 5} {
	puts "\nOther Gateway or device"
} else {
	puts "\nFalse : $idx\n"
	exit
}
set gwtype $idx

if { $inputtty == "" } {

	# serial connection
	if { $ostype == 0} {
		set files [glob -directory [cd /sys/class/tty/] -tails ttyUSB*]
	} elseif { $ostype == 1 } {
		set files [glob -directory [cd /dev/] -tails cu.*]
	} else {
		puts "Unkown OS type!"
		exit
	}

	set tty_dev /dev/ttyUSB0
	puts "Available tty:"
	set idx 0
	array set tty_devs {}
	foreach x $files {
		puts "\[$idx\] $x"
		append tty_devs($idx) $x
		incr idx
	}
	if {$idx == 0} {
		puts "There is no serial device(tty USB)!"
		exit
	}
	set n_tty_devs $idx
	set idx 0
	send_user "\nEnter serial device ($idx): "
	expect_user -re "(.*)\n"
	set test $expect_out(1,string)
	if {$test != ""} {
		set idx $test
	}
	if {$idx >= $n_tty_devs} {
		puts "Wrong choice!"
		exit
	}
	set tty_dev "/dev/$tty_devs($idx)"
} else {
	set tty_dev $inputtty
}

if { $idx == 4 || $idx == 5} {
	set tty_baudrate 115200
} else {
	set tty_baudrate 38400
}
puts "Connecting to $tty_dev\n"
set tty_id [open $tty_dev r+]

# serial port parameters
if { $ostype == 0} {
	exec stty -F $tty_dev $tty_baudrate raw -ixon -crtscts -echo -istrip -hup
} elseif { $ostype == 1 } {
	exec stty -f $tty_dev $tty_baudrate raw -ixon -crtscts -echo -istrip -hup
} else {
	puts "Unkown OS type!"
	exit
}

# connect
spawn -noecho -open $tty_id
set console $spawn_id
set times 0

puts "\nPower ON Gateway NOW!"

expect {
	"uart ok" {
		send -- "u"
	}
	"Enter ROM console" {
		puts "Connected to correct flahser!"
	}
	"load img ok" {
		puts "Connected to wrong flahser!"
		exit
	}
	"IPL_CUST" {
		while { $times < 300 } {
			set timeout 1
			send "\r"
			expect {
				"SigmaStar #" {
					set timeout -1
					break
				}
				"Kernel command line" {
					puts "\n\nStopping the bootloader failed"
					exit
				}
				eof { }
			}
			set times [ expr $times+1];
		}
	}
	timeout {
		puts "Timeout waiting for response!"
		exit
	}
}

if { $gwtype >= 4 } {
	send "printenv bootargs\r"
	expect "SigmaStar #"
	set bootargs $expect_out(buffer)
	set bootargs [string map {"printenv bootargs" ""} $bootargs]
	set bootargs [string map {"bootargs=" ""} $bootargs]
	set bootargs [string map {"SigmaStar #" ""} $bootargs]
	set bootargs [string map {"/linuxrc" "/bin/sh"} $bootargs]
	set bootargs [string trimright $bootargs]
	set bootargs [string trim $bootargs]
	puts "setenv bootargs $bootargs\r"
	send "setenv bootargs $bootargs\r"
	expect "SigmaStar #"
	send "printenv bootargs\r"
	expect "SigmaStar #"
	send "run bootcmd\r"
	set timeout -1
	expect "/ #"
} else {
	expect "<RealTek>"
	set timeout -1
	send "dbgmsg 3\r"
	expect "<RealTek>"
	send "ri 0 1 1\r"
	expect "<RealTek>"
	puts ""

	if { $ostype == 0} {
		spawn -noecho sh -c "sx -vv -X -b $flasher_file < $tty_dev > $tty_dev"
	} elseif { $ostype == 1 } {
		spawn -noecho sh -c "lsx -vv -X -b $flasher_file < $tty_dev > $tty_dev"
	}
	set xmodem $spawn_id
	expect -i $xmodem "Give your local XMODEM receive command now"
	send -i $console "xmrx 80000000\r"
	expect -i $xmodem "Transfer complete"
	set spawn_id $console

	send "\r"
	expect "<RealTek>"

	send "j 80000000\r"
	expect "Jump to 0x80000000"
	if { $ostype == 0} {
		exec stty -F $tty_dev 38400
	} elseif { $ostype == 1 } {
		exec stty -f $tty_dev 38400
	}

	send "\r"
	expect "<RealTek>"

	# boot
	puts "If it got 'Uncompressing Linux...LZMA: Decoding error', please try restart the gateway and try again."
	send "bootsh\r"
	expect "BusyBox v"
	expect "#"
}

if { $gwtype == 0} {
	send "mount -t ramfs ramfs /var; mkdir /var/tmp\r"
	expect "#"
	send "cp /etc/init.d/rcS /var/tmp/rcS\r"
	expect "#"
	send "sed -i 's/startup.sh/echo /g' /var/tmp/rcS\r"
	expect "#"
	send "/var/tmp/rcS\r"
} elseif { $gwtype == 1 } {
	send "mount -t ramfs ramfs /var; mkdir /var/tmp\r"
	expect "#"
	send "cp /etc/init.d/rcS /var/tmp/rcS\r"
	expect "#"
	send "sed -i 's/fw_manager.sh -r/echo skip/g' /var/tmp/rcS\r"
	send "sed -i 's/${CUSTOM_POST_INIT} &/echo skip/g' /var/tmp/rcS\r"
	expect "#"
	send "/var/tmp/rcS\r"
} elseif { $gwtype == 2 } {
	send "mount -t proc proc /proc; mount -t ramfs ramfs /var; mount -t sysfs sysfs /sys; mkdir /var/tmp\r"
	expect "#"
	send "kick_wdog_timer &\r"
	expect "#"
	send "mount -t yaffs2 -o tags-ecc-off -o inband-tags /dev/mtdblock7 /lumi\r"
} elseif { $gwtype == 3 } {
	send "mount -t proc proc /proc; mount -t ramfs ramfs /var; mount -t sysfs sysfs /sys; mkdir /var/tmp\r"
	expect "#"
	send "kick_wdog &\r"
	expect "#"
	send "kick_wdog_timer &\r"
	expect "#"
	send "kick_wdog_timer.sh &\r"
} elseif { ( $gwtype == 4 ) || (  $gwtype == 5 ) } {
	send "mount -t ramfs ramfs /var; mkdir /var/tmp\r"
	expect "#"
	send "cp /etc/init.d/rcS /var/tmp/rcS\r"
	expect "#"
	send "sed -i 's/fw_manager.sh -r/echo skip/g' /var/tmp/rcS\r"
	send "sed -i 's/${CUSTOM_POST_INIT} &/echo skip/g' /var/tmp/rcS\r"
	expect "#"
	send "/var/tmp/rcS\r"
} else {
	exit
}
expect "#"
if { $gwtype >= 4 } {
	send "passwd -d root\r"
} else {
	send "passwd -d admin\r"
}
expect "#"

set modelname 0
if { $gwtype == 0} {
	puts "\n\nGateway token in ASCII (use xxd -p to convert to 32 characters hexadecimal string):"
	send "cat /data/miio/device.token\r"
	expect "#"
	puts "\nGateway Info:"
	send "cat /data/miio/device.conf\r"
} elseif { $gwtype == 1 } {
	send "setprop persist.app.tty_enable truer\r"
	expect "#"
	puts "\nGateway Info:"
	send "getprop | grep miio\r"
	expect "#"
	send "getprop persist.sys.model\r"
	expect {
		"lumi.gateway.acn01" {
			set modelname 1
		}
		"lumi.aircondition.acn05" {
			set modelname 2
		}
		"lumi.gateway.iragl5" {
			set modelname 3
		}
		"lumi.gateway.agl001" {
			set modelname 3
		}
		"lumi.gateway.sacn01" {
			set modelname 4
		}
	}
} elseif { $gwtype == 2 } {
	send "cat /lumi/app/gw/conf/device.conf\r"
} elseif {$gwtype >= 4} {
	puts "\n\nGateway token in ASCII (use xxd -p to convert to 32 characters hexadecimal string):"
	send "cat /data/miio/device.token\r"
	expect "#"
	puts "\nGateway Info:"
	send "cat /data/miio/device.conf\r"
}
expect "#"

if { $gwtype == 1} {
	puts "\nGateway clear password complete, and the gateway info is showed, then it will be rebooted!\n If the gateway is CN or new Global version, you can flash modified firmware after reboot to enable telnet."

	send_user "\nWould you like to flash M2 modified firmware? (y/N): "
	expect_user -re "(.*)\n"
	set test $expect_out(1,string)
	if {$test == "y"} {
		puts "1. Connect Gateway to ethernet \n2. Make sure that gateway connect to internet (access to github) \n3.While flashing firmware, PLEASE donot disconnect the power"
		send "fw_manager.sh -r\r"
		set timeout 10
		expect "mDNSResponder"
		expect "#"
		set timeout -1
		send "cd /tmp && wget -O /tmp/curl "http://master.dl.sourceforge.net/project/mgl03/bin/curl?viasf=1" && chmod a+x /tmp/curl\r"
		expect "#"
		if { $modelname == 1} {
			send "/tmp/curl -s -k -L -o /tmp/m1s_update.sh https://raw.githubusercontent.com/niceboygithub/AqaraM1SM2fw/main/modified/M1S/m1s_update.sh\r"
			expect "#"
			send "chmod a+x /tmp/m1s_update.sh && /tmp/m1s_update.sh\r"
		} elseif { $gwtype == 2} {
			send "/tmp/curl -s -k -L -o /tmp/p3_update.sh https://raw.githubusercontent.com/niceboygithub/AqaraM1SM2fw/main/modified/P3/p3_update.sh\r"
			expect "#"
			send "chmod a+x /tmp/p3_update.sh && /tmp/p3_update.sh\r"
		} elseif { $gwtype == 3} {
			send "/tmp/curl -s -k -L -o /tmp/m2_update.sh https://raw.githubusercontent.com/niceboygithub/AqaraM1SM2fw/main/modified/M2/m2_update.sh\r"
			expect "#"
			send "chmod a+x /tmp/m2_update.sh && /tmp/m2_update.sh\r"
		} elseif { $gwtype == 4} {
			send "/tmp/curl -s -k -L -o /tmp/h1_update.sh https://raw.githubusercontent.com/niceboygithub/AqaraM1SM2fw/main/modified/H1/h1_update.sh\r"
			expect "#"
			send "chmod a+x /tmp/h1_update.sh && /tmp/h1_update.sh\r"
		} else {
			puts "Error: Unkown supported gateway"
			send "\r"
		}
		expect "#"
	}
} else {
	puts "\nGateway clear password complete, and the gateway info is showed, then it will be rebooted!"
}

send "reboot\r"
close $console

set timeout -1
send_user "\nIf this project helped you, you can treat me with a cup of coffee :)\nOpen url $coffee_url1 (y/N): "
expect_user -re "(.*)\n"
set test $expect_out(1,string)
if {$test == "y"} {
	if { $ostype == 0} {
		exec xdg-open $coffee_url1
		exec xdg-open $coffee_url2
	} elseif { $ostype == 1 } {
		exec open $coffee_url1
		exec open $coffee_url2
	}
}